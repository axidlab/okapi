// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: security.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Didcomm_Messaging_EncryptionMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case direct // = 0
  case contentEncryptionKey // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .direct
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .direct
    case 1: self = .contentEncryptionKey
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .direct: return 0
    case .contentEncryptionKey: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Didcomm_Messaging_EncryptionAlgorithm: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case xchacha20Poly1305 // = 0
  case aesGcm // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .xchacha20Poly1305
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .xchacha20Poly1305
    case 1: self = .aesGcm
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .xchacha20Poly1305: return 0
    case .aesGcm: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Didcomm_Messaging_DCMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var type: String = String()

  public var body: Data = SwiftProtobuf.Internal.emptyData

  public var to: [String] = []

  public var from: String = String()

  public var correlationID: String = String()

  public var created: Int64 = 0

  public var expires: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_SignedMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var signatures: [Didcomm_Messaging_Signature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Data = SwiftProtobuf.Internal.emptyData

  public var signature: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_SignatureHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var algorithm: String = String()

  public var keyID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_EncryptedMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var iv: Data = SwiftProtobuf.Internal.emptyData

  public var aad: Data = SwiftProtobuf.Internal.emptyData

  public var ciphertext: Data = SwiftProtobuf.Internal.emptyData

  public var tag: Data = SwiftProtobuf.Internal.emptyData

  public var recipients: [Didcomm_Messaging_EncryptionRecipient] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_EncryptionHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mode: Didcomm_Messaging_EncryptionMode = .direct

  public var algorithm: Didcomm_Messaging_EncryptionAlgorithm = .xchacha20Poly1305

  public var keyID: String = String()

  public var senderKeyID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Didcomm_Messaging_EncryptionRecipient {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var header: Didcomm_Messaging_EncryptionHeader {
    get {return _storage._header ?? Didcomm_Messaging_EncryptionHeader()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {_storage._header = nil}

  public var contentEncryptionKey: Data {
    get {return _storage._contentEncryptionKey}
    set {_uniqueStorage()._contentEncryptionKey = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "didcomm.messaging"

extension Didcomm_Messaging_EncryptionMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "direct"),
    1: .same(proto: "content_encryption_key"),
  ]
}

extension Didcomm_Messaging_EncryptionAlgorithm: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "xchacha20poly1305"),
    1: .same(proto: "aes_gcm"),
  ]
}

extension Didcomm_Messaging_DCMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DCMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "body"),
    4: .same(proto: "to"),
    5: .same(proto: "from"),
    6: .unique(proto: "correlation_id", json: "thread_id"),
    7: .unique(proto: "created", json: "created_time"),
    8: .unique(proto: "expires", json: "expires_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.type)
      case 3: try decoder.decodeSingularBytesField(value: &self.body)
      case 4: try decoder.decodeRepeatedStringField(value: &self.to)
      case 5: try decoder.decodeSingularStringField(value: &self.from)
      case 6: try decoder.decodeSingularStringField(value: &self.correlationID)
      case 7: try decoder.decodeSingularInt64Field(value: &self.created)
      case 8: try decoder.decodeSingularInt64Field(value: &self.expires)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularBytesField(value: self.body, fieldNumber: 3)
    }
    if !self.to.isEmpty {
      try visitor.visitRepeatedStringField(value: self.to, fieldNumber: 4)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 5)
    }
    if !self.correlationID.isEmpty {
      try visitor.visitSingularStringField(value: self.correlationID, fieldNumber: 6)
    }
    if self.created != 0 {
      try visitor.visitSingularInt64Field(value: self.created, fieldNumber: 7)
    }
    if self.expires != 0 {
      try visitor.visitSingularInt64Field(value: self.expires, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_DCMessage) -> Bool {
    if self.id != other.id {return false}
    if self.type != other.type {return false}
    if self.body != other.body {return false}
    if self.to != other.to {return false}
    if self.from != other.from {return false}
    if self.correlationID != other.correlationID {return false}
    if self.created != other.created {return false}
    if self.expires != other.expires {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_SignedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignedMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "signatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.payload)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.signatures)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 1)
    }
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signatures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_SignedMessage) -> Bool {
    if self.payload != other.payload {return false}
    if self.signatures != other.signatures {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Signature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.header)
      case 3: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.header.isEmpty {
      try visitor.visitSingularBytesField(value: self.header, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_Signature) -> Bool {
    if self.header != other.header {return false}
    if self.signature != other.signature {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_SignatureHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignatureHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "algorithm"),
    2: .standard(proto: "key_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.algorithm)
      case 2: try decoder.decodeSingularStringField(value: &self.keyID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.algorithm.isEmpty {
      try visitor.visitSingularStringField(value: self.algorithm, fieldNumber: 1)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_SignatureHeader) -> Bool {
    if self.algorithm != other.algorithm {return false}
    if self.keyID != other.keyID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_EncryptedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptedMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iv"),
    2: .same(proto: "aad"),
    3: .same(proto: "ciphertext"),
    4: .same(proto: "tag"),
    5: .same(proto: "recipients"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.iv)
      case 2: try decoder.decodeSingularBytesField(value: &self.aad)
      case 3: try decoder.decodeSingularBytesField(value: &self.ciphertext)
      case 4: try decoder.decodeSingularBytesField(value: &self.tag)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.recipients)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iv.isEmpty {
      try visitor.visitSingularBytesField(value: self.iv, fieldNumber: 1)
    }
    if !self.aad.isEmpty {
      try visitor.visitSingularBytesField(value: self.aad, fieldNumber: 2)
    }
    if !self.ciphertext.isEmpty {
      try visitor.visitSingularBytesField(value: self.ciphertext, fieldNumber: 3)
    }
    if !self.tag.isEmpty {
      try visitor.visitSingularBytesField(value: self.tag, fieldNumber: 4)
    }
    if !self.recipients.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recipients, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_EncryptedMessage) -> Bool {
    if self.iv != other.iv {return false}
    if self.aad != other.aad {return false}
    if self.ciphertext != other.ciphertext {return false}
    if self.tag != other.tag {return false}
    if self.recipients != other.recipients {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_EncryptionHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptionHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "mode", json: "enc"),
    2: .unique(proto: "algorithm", json: "alg"),
    3: .unique(proto: "key_id", json: "kid"),
    4: .unique(proto: "sender_key_id", json: "skid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.mode)
      case 2: try decoder.decodeSingularEnumField(value: &self.algorithm)
      case 3: try decoder.decodeSingularStringField(value: &self.keyID)
      case 4: try decoder.decodeSingularStringField(value: &self.senderKeyID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .direct {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if self.algorithm != .xchacha20Poly1305 {
      try visitor.visitSingularEnumField(value: self.algorithm, fieldNumber: 2)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 3)
    }
    if !self.senderKeyID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderKeyID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_EncryptionHeader) -> Bool {
    if self.mode != other.mode {return false}
    if self.algorithm != other.algorithm {return false}
    if self.keyID != other.keyID {return false}
    if self.senderKeyID != other.senderKeyID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Didcomm_Messaging_EncryptionRecipient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptionRecipient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "header", json: "unprotected"),
    2: .unique(proto: "content_encryption_key", json: "cek"),
  ]

  fileprivate class _StorageClass {
    var _header: Didcomm_Messaging_EncryptionHeader? = nil
    var _contentEncryptionKey: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _header = source._header
      _contentEncryptionKey = source._contentEncryptionKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._header)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._contentEncryptionKey)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._contentEncryptionKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._contentEncryptionKey, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Didcomm_Messaging_EncryptionRecipient) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._header != other_storage._header {return false}
        if _storage._contentEncryptionKey != other_storage._contentEncryptionKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
